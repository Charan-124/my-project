-----SVG Drawing Application
This project is a simple web-based drawing application where users can draw freehand lines inside an SVG canvas using their mouse. It demonstrates how JavaScript can interact with SVG elements, capture mouse events, and dynamically update the drawing in real time.

--JavaScript
At the heart of this project is the code that listens to mouse actions (mousedown, mousemove, mouseup, and mouseleave) and updates an SVG <path> element to create a drawing.

Key parts of the script:
-const svg
Connected to the <svg> element using document.getElementById('canvas').
This is where all the drawing happens.

-let drawing, path, d
drawing is a boolean that tracks if the mouse is currently pressed.
path holds the reference to the active <path> being drawn.
d is a string that stores the SVG path data (the line instructions).

-function getPoint(evt)
This helper function calculates the exact x and y coordinates of the mouse inside the SVG canvas using getBoundingClientRect(). It ensures that the drawing lines are aligned correctly within the drawing area.

-mousedown event
Starts a new path (M x y = move to position).
Creates a new <path> element with attributes like stroke="blue", stroke-width="2", and fill="none".
Appends this path to the SVG canvas.

-mousemove event
While the mouse is pressed (drawing = true), the code adds new line instructions (L x y) to d.
Updates the "d" attribute of the <path>, so the line grows as the mouse moves.

-mouseup & mouseleave events
Stop the drawing by setting drawing = false.
This event-driven approach makes the drawing experience smooth and responsive.


--CSS
body uses flexbox to center items and adds padding.
.drawing-area is styled with a black border, rounded corners, fixed width/height, and a light background (#d5fcf5).
svg is set to fill the entire drawing area (width: 100%; height: 100%).
.container wraps content with padding, border, and alignment for a neat layout.

--Learning Outcomes
Learned how to capture mouse events (mousedown, mousemove, mouseup, mouseleave) in JavaScript.
Understood how to create and manipulate SVG elements (<path>) dynamically with createElementNS().
Gained experience with the SVG path syntax (M for move, L for line).
Practiced real-time DOM manipulation by continuously updating the "d" attribute of a path.
Improved understanding of coordinate systems and how getBoundingClientRect() helps map mouse positions inside an SVG element.